package vozm_napr;

import java.awt.*;
import java.awt.event.*;
import java.applet.*;
import javax.swing.*;
//import javax.swing.border.*;
//import com.borland.jbcl.layout.*;
//import java.beans.*;

public class AppLectMet_vozm_napr extends JApplet {
  boolean isStandalone = false;
  int step=32,ok=0;
  int x[]=new int[3];
  int y[]=new int[3];
  Panel_paint1 jPn1Main = new Panel_paint1();
  Panel_paint2 jPn1Plus = new Panel_paint2();
  JButton jbtnNext = new JButton();
  JButton jbtnNew = new JButton();
  JButton jbtnBack = new JButton();
  JCheckBox jChkbFormula = new JCheckBox();
  /**Get a parameter value*/
  public String getParameter(String key, String def) {
    return isStandalone ? System.getProperty(key, def) :
      (getParameter(key) != null ? getParameter(key) : def);
  }

  /**Construct the applet*/
  public AppLectMet_vozm_napr() {
  }
  /**Initialize the applet*/
  public void init() {
    try {
      jbInit();
    }
    catch(Exception e) {
      e.printStackTrace();
    }
  }
  /**Component initialization*/
  private void jbInit() throws Exception {

   this.getContentPane().setLayout(null);

   jbtnNext.setBounds(new Rectangle(430,515,127,23));
   jbtnNext.setBackground(new Color(167, 213, 255));
   jbtnNext.setFont(new java.awt.Font("Dialog", 1, 14));
   jbtnNext.setForeground(new Color(0, 0, 130));
   jbtnNext.setText("==>");
   this.getContentPane().add(jbtnNext, null);
   jbtnNext.addActionListener(new java.awt.event.ActionListener() {
     public void actionPerformed(ActionEvent e) {
       jbtnNext_actionPerformed(e);
     }
   });

   jbtnNew.setBounds(new Rectangle(280,515,127,23));
   jbtnNew.setBackground(new Color(167, 213, 255));
   jbtnNew.setFont(new java.awt.Font("Dialog", 1, 12));
   jbtnNew.setForeground(new Color(0, 0, 130));
   jbtnNew.setText("Обновить");
   this.getContentPane().add(jbtnNew, null);
   jbtnNew.addActionListener(new java.awt.event.ActionListener() {
    public void actionPerformed(ActionEvent e) {
       jbtnNew_actionPerformed(e);
     }
   });

   jbtnBack.setBounds(new Rectangle(130,515,127,23));
   jbtnBack.setBackground(new Color(167, 213, 255));
   jbtnBack.setFont(new java.awt.Font("Dialog", 1, 14));
   jbtnBack.setForeground(new Color(0, 0, 130));
   jbtnBack.setText("<==");
   this.getContentPane().add(jbtnBack, null);
   jbtnBack.addActionListener(new java.awt.event.ActionListener() {
     public void actionPerformed(ActionEvent e) {
       jbtnBack_actionPerformed(e);
     }
   });

   jChkbFormula.setBounds(545,483,100,20);
   jChkbFormula.setBackground(Color.white);
   jChkbFormula.setFont(new java.awt.Font("Dialog", 1, 14));
   jChkbFormula.setForeground(new Color(130, 0, 60));
   jChkbFormula.setBorder(BorderFactory.createLineBorder(new Color(164, 197, 151),1));
   jChkbFormula.setText("Формулы");
   jChkbFormula.setVisible(false);
   jChkbFormula.setSelected(false);
   this.getContentPane().add(jChkbFormula, null);
   jChkbFormula.addMouseListener(new java.awt.event.MouseAdapter() {
      public void mousePressed(MouseEvent e) {
        jChkbFormula_mousePressed(e);
      }
    });

   this.setSize(new Dimension(700,570));
   this.getContentPane().setBackground(new Color(80, 80, 180));

   jPn1Plus.setBackground(new Color(230, 230, 230));
   jPn1Plus.setBounds(new Rectangle(135, 100, 400, 390));
   jPn1Plus.setVisible(false);
   this.getContentPane().add(jPn1Plus, null);

   //jPn1Main.setBackground(new Color(0, 0, 130));
   jPn1Main.setBackground(new Color(31, 82, 113));
   jPn1Main.setBounds(new Rectangle(0, 0, 700, 570));
   this.getContentPane().add(jPn1Main, null);
  }
  /**Get Applet information*/
  public String getAppletInfo() {
    return "Applet Information";
  }
  /**Get parameter info*/
  public String[][] getParameterInfo() {
    return null;
  }

 //static initializer for setting look & feel
  static {
    try {
      //UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
      //UIManager.setLookAndFeel(UIManager.getCrossPlatformLookAndFeelClassName());
    }
    catch(Exception e) {
    }
  }

  class Panel_paint2 extends JPanel {
  public void paintComponent(Graphics g2) {
   super.paintComponent(g2);

   g2.setColor(new Color(167, 213, 255)); //
   g2.fill3DRect(1,1,398,388,true);       //
   g2.setColor(Color.white);              //
   g2.fillRect(20,20,360,350);            //
   g2.setColor(new Color(213, 225, 255)); //
   for(int i=0;i<36;i++)                  //
    g2.drawLine(20,20+i*10,380,20+i*10);  //            Оформление окна
   for(int i=0;i<37;i++)                  //
   g2.drawLine(20+i*10,20,20+i*10,370);   //
   g2.setColor(new Color(40,70,170));     //
   g2.drawRect(20,20,360,350);            //
   g2.setColor(new Color(150,0,0));       //
   g2.setFont(new Font("Dialog",1,14));   //
   g2.drawString("Формулы:",160,40);      //
   g2.setColor(new Color(0,0,80));        //
   g2.setFont(new Font("Dialog",3,12));   //

   if(step>=3)
    {
     g2.setColor(new Color(200,0,0));
     g2.setFont(new Font("Dialog",1,14));
     g2.drawString("(1)",350,70);
     g2.setColor(new Color(0,0,80));
     OptimizationBasic.drawFormula(g2,"f(x^{*}) = min f(x),",40,60,new java.awt.Font("Dialog",1,14),new java.awt.Font("Dialog",1,11));
     OptimizationBasic.drawFormula(g2,"X = {x \u2208 R^{n} | g_{j}(x) \u2264 0; j = 1,..,m; m<n}",40,90,new java.awt.Font("Dialog",1,14),new java.awt.Font("Dialog",1,11));
     OptimizationBasic.drawFormula(g2,"x \u2208 X",83,70,new java.awt.Font("Dialog",1,11),new java.awt.Font("Dialog",1,11));


     g2.drawLine(30,50,30,68);
     g2.drawLine(31,50,31,68);
     g2.drawLine(30,74,30,90);
     g2.drawLine(31,74,31,90);
     g2.drawLine(31,68,28,70);
     g2.drawLine(30,68,28,71);
     g2.drawLine(31,74,28,72);
     g2.drawLine(30,74,28,70);
     g2.drawLine(30,50,33,48);
     g2.drawLine(31,50,33,47);
     g2.drawLine(30,90,33,92);
     g2.drawLine(31,90,33,93);
     g2.drawLine(27,71,27,71);
    }
   if(step>=6)
    {
     g2.setColor(new Color(200,0,0));
     g2.setFont(new Font("Dialog",1,14));
     g2.drawString("(2)",350,120);
     g2.setColor(new Color(0,0,80));
     OptimizationBasic.drawFormula(g2,"x^{k+1} = x^{k} + t_{k}*s^{k}",40,120,new java.awt.Font("Dialog",1,14),new java.awt.Font("Dialog",1,11));
    }
   if(step>=17)
    {
     g2.setColor(new Color(200,0,0));
     g2.setFont(new Font("Dialog",1,14));
     g2.drawString("(3)",350,160);
     g2.setColor(new Color(0,0,80));
     OptimizationBasic.drawFormula(g2,"min < f (x^{k}), s^{k} >",40,150,new java.awt.Font("Dialog",1,14),new java.awt.Font("Dialog",1,11));
     g2.drawLine(88,138,88,142);
     g2.drawLine(89,138,89,142);
     OptimizationBasic.drawFormula(g2,"< g _{j} (x^{k}), s^{k} > < 0   j \u2208 J_{a}",40,180,new java.awt.Font("Dialog",1,14),new java.awt.Font("Dialog",1,11));
     g2.drawLine(62,168,62,172);
     g2.drawLine(63,168,63,172);

     g2.drawLine(30,140,30,158);
     g2.drawLine(31,140,31,158);
     g2.drawLine(30,164,30,180);
     g2.drawLine(31,164,31,180);
     g2.drawLine(31,158,28,160);
     g2.drawLine(30,158,28,161);
     g2.drawLine(31,164,28,162);
     g2.drawLine(30,164,28,160);
     g2.drawLine(30,140,33,138);
     g2.drawLine(31,140,33,137);
     g2.drawLine(30,180,33,182);
     g2.drawLine(31,180,33,183);
     g2.drawLine(27,161,27,161);
    }
   if(step>=19)
    {
     g2.setColor(new Color(200,0,0));
     g2.setFont(new Font("Dialog",1,14));
     g2.drawString("(3.1)",340,210);
     g2.setColor(new Color(0,0,80));
     OptimizationBasic.drawFormula(g2,"|| s || \u2264 1   s_{1} + s_{2} = 1",40,210,new java.awt.Font("Dialog",1,14),new java.awt.Font("Dialog",1,11));
     g2.setFont(new Font("Dialog",1,11));
     g2.drawString("2",117,200);
     g2.drawString("2",147,200);
    }
   if(step>=20)
    {
     g2.setColor(new Color(200,0,0));
     g2.setFont(new Font("Dialog",1,14));
     g2.drawString("(3.2)",340,240);
     g2.setColor(new Color(0,0,80));
     OptimizationBasic.drawFormula(g2,"| s_{j} | \u2264 1   -1 \u2264 s_{1} \u2264  1;  -1 \u2264 s_{2} \u2264  1",40,240,new java.awt.Font("Dialog",1,14),new java.awt.Font("Dialog",1,11));
    }
   if(step>=23)
    {
     g2.setColor(new Color(200,0,0));
     g2.setFont(new Font("Dialog",1,14));
     g2.drawString("(4)",350,270);
     g2.setColor(new Color(0,0,80));
     OptimizationBasic.drawFormula(g2,"f ( x^{k} + t^{*}_{k}s^{k} ) = min  { f ( x^{k} + t_{k}s^{k}) }",40,270,new java.awt.Font("Dialog",1,14),new java.awt.Font("Dialog",1,11));
     OptimizationBasic.drawFormula(g2,"t_{k} \u2265 0",145,280,new java.awt.Font("Dialog",1,11),new java.awt.Font("Dialog",1,11));
    }
   if(step>=26)
    {
     g2.setColor(new Color(200,0,0));
     g2.setFont(new Font("Dialog",1,14));
     g2.drawString("(5)",350,310);
     g2.setColor(new Color(0,0,80));
     OptimizationBasic.drawFormula(g2,"t^{j}_{k} = max { 0, g_{j} ( x^{k} + t_{k}s^{k}) = 0 }",40,300,new java.awt.Font("Dialog",1,14),new java.awt.Font("Dialog",1,11));
     OptimizationBasic.drawFormula(g2,"j = 1 .. m",67,310,new java.awt.Font("Dialog",1,11),new java.awt.Font("Dialog",1,11));
     OptimizationBasic.drawFormula(g2,"t^{**}_{k} = min { t^{ j}_{k} > 0 }",40,330,new java.awt.Font("Dialog",1,14),new java.awt.Font("Dialog",1,11));
     g2.setFont(new Font("Dialog",1,11));
     g2.drawString("j = 1..m",73,340);

     g2.drawLine(30,290,30,308);
     g2.drawLine(31,290,31,308);
     g2.drawLine(30,314,30,330);
     g2.drawLine(31,314,31,330);
     g2.drawLine(31,308,28,310);
     g2.drawLine(30,308,28,311);
     g2.drawLine(31,314,28,312);
     g2.drawLine(30,314,28,310);
     g2.drawLine(30,290,33,288);
     g2.drawLine(31,290,33,287);
     g2.drawLine(30,330,33,332);
     g2.drawLine(31,330,33,333);
     g2.drawLine(27,311,27,311);
    }
   if(step>=27)
    {
     g2.setColor(new Color(200,0,0));
     g2.setFont(new Font("Dialog",1,14));
     g2.drawString("(6)",350,360);
     g2.setColor(new Color(0,0,80));
     OptimizationBasic.drawFormula(g2,"t_{k} = min { t^{*}_{k} > 0 , t^{**}_{k} > 0 }",40,360,new java.awt.Font("Dialog",1,14),new java.awt.Font("Dialog",1,11));
    }
}}

  class Panel_paint1 extends JPanel {
  public void paintComponent(Graphics g1) {
   super.paintComponent(g1);
//----------------Оформление окна-----------------------------------
   g1.setColor(new Color(0,0,50));
   //g1.setColor(new Color(31,82,113));
   g1.fill3DRect(12,13,655,500,true);
   g1.setColor(Color.white);
   g1.fill3DRect(10,10,651,496,true);
   //g1.setColor(new Color(0, 0, 130));
   g1.setColor(new Color(31, 82, 113));
   for(int i=0;i<57;i++)
    for(int j=0;j<57;j++)
      {
        if(Math.sqrt((j-9-57)*(j-9-57)+(i-9-57)*(i-9-57))>60)
         g1.drawRect(i,j,1,1);
      }

    //g1.setColor(new Color(0,0,150));
    g1.setColor(new Color(31, 82, 113));
    g1.drawLine(58,9,663,9);
    g1.drawArc(9,9,96,96,90,90);
    g1.drawLine(9,58,9,509);
    //g1.setColor(new Color(0,0,60));
    g1.drawLine(58,10,663,10);
    g1.drawArc(10,10,96,96,90,90);
    g1.drawLine(10,58,10,509);
    for(int i=1;i<=22;i++)
     {
      g1.setColor(new Color(0,0,0));
      g1.fillOval(41+i*25,16,8,8);
      g1.drawArc(35+i*25,1,20,20,9,270);
      g1.drawArc(34+i*25,0,20,20,5,270);
      g1.setColor(new Color(170,170,170));
      g1.drawArc(41+i*25,17,5,5,220,180);
      g1.drawArc(36+i*25,2,19,19,10,60);
      g1.drawArc(33+i*25,-1,23,23,110,70);
     }
    g1.setColor(new Color(213, 225, 255));

    for(int i=5;i<46;i++)
     g1.drawLine(40,30+i*10,630,30+i*10);
    for(int i=0;i<60;i++)
     g1.drawLine(40+i*10,80,40+i*10,480);

//--------------------------------------------
   if(step==0)
      {
       g1.setColor(new Color(0,0,160));
       g1.setFont(new Font("Dialog",1,26));
       g1.drawString("Тема лекции:",250,170);
       g1.setColor(new Color(130,0,60));
       g1.setFont(new Font("Dialog",1,28));
       g1.drawString("Метод возможных направлений",110,250);
       g1.setFont(new Font("Dialog",1,18));
       g1.drawString("(задача с линейными ограничениями)",165,290);
       g1.setColor(new Color(60,0,250));
       g1.drawLine(80,260,590,260);
       g1.drawLine(160,270,510,270);
       g1.setColor(new Color(0,0,10));
       g1.drawLine(160,271,510,271);
       g1.drawLine(80,261,590,261);
       g1.setColor(new Color(40,70,170));
       g1.drawRect(40,80,590,400);
       jbtnBack.setEnabled(false);
      }
        else
        if(step!=35)
        {
          g1.setFont(new Font("Dialog",1,16));
          g1.setColor(new Color(130,0,60));
          g1.drawString("Метод возможных направлений для задачи с линейными ограничениями",40,55);

          g1.setColor(new Color(100, 80, 255));
          g1.drawLine(150,62,520,62);
          g1.drawLine(230,70,440,70);
          g1.setColor(new Color(0, 0, 0));
          g1.drawLine(150,63,520,63);
          g1.drawLine(230,71,440,71);
        }

     if(step<2)
      {
       jPn1Plus.setVisible(false);
       jChkbFormula.setVisible(false);
       jChkbFormula.setSelected(false);
       ok=0;
      }
     if(ok==1 && jPn1Plus.isVisible()==false && step>=2)
        {
         jPn1Plus.setVisible(true);
         repaint();
        }
        else
         if(ok==0 && jPn1Plus.isVisible()==true)
          {
           jPn1Plus.setVisible(false);
           repaint();
          }
     if(step>=1)
      jbtnBack.setEnabled(true);
     if(step>=2 && step<=7)
     {
     if(step>=2)
      {
       if(step==2)
        g1.setColor(new Color(0,0,160));
        else
         g1.setColor(new Color(0,0,80));
       g1.setFont(new Font("Dialog",1,14));
       g1.drawString("Рассмотрим следующую задачу:",70,100);
       g1.drawString("найти минимум функции",50,120);
       OptimizationBasic.drawFormula(g1,"f(x) = f(x_{1},...x_{n})  при линейных ограничениях, т.е. такую",235,120,new java.awt.Font("Dialog",1,14),new java.awt.Font("SanSerief",1,11));
       OptimizationBasic.drawFormula(g1,"точку x^{*} \u2208 X, что",50,140,new java.awt.Font("Dialog",1,14),new java.awt.Font("Dialog",1,11));
       jChkbFormula.setVisible(true);
      }
     if(step>=3)
      {
       g1.setColor(new Color(246,246,250));
       g1.fillRect(160,150,360,40);
       g1.setColor(new Color(250,0,0));
       g1.drawRect(160,150,360,40);
       OptimizationBasic.drawFormula(g1,"f(x^{*}) = min f(x), X = {x\u2208R^{n} | g_{j}(x) \u2264 0; j = 1,..,m; m<n}",170,170,new java.awt.Font("Dialog",1,14),new java.awt.Font("Dialog",1,11));
       OptimizationBasic.drawFormula(g1,"x \u2208 X",213,180,new java.awt.Font("Dialog",1,11),new java.awt.Font("Dialog",1,11));
       g1.setFont(new Font("Dialog",1,14));
       g1.drawString("(1)",600,170);
       if(step==3)
        g1.setColor(new Color(0,0,160));
         else
          g1.setColor(new Color(0,0,80));
       OptimizationBasic.drawFormula(g1,"где функции g_{j}(x)\u2264 0,  j=1,..,m  являются дифференцируемыми функциями x.",50,210,new java.awt.Font("Dialog",1,14),new java.awt.Font("Dialog",1,11));
      }
     if(step>=4)
      {
       if(step==4)
        g1.setColor(new Color(0,0,160));
         else
          g1.setColor(new Color(0,0,80));
       g1.drawString("Для решения этой задачи будем использовать метод возможных направле-",70,230);
       g1.drawString("ний. Направление s называется",50,250);
       g1.drawString(", если",380,250);
       g1.setColor(new Color(150,0,0));
       g1.setFont(new Font("Dialog",3,15));
       g1.drawString("возможным",287,250);
       g1.setFont(new Font("Dialog",1,14));
       g1.setColor(new Color(246,246,250));
       g1.fillRect(200,260,270,30);
       g1.setColor(new Color(250,0,0));
       g1.drawRect(200,260,270,30);
       OptimizationBasic.drawFormula(g1,"\u2203 \u03BB^{|} > 0:    x + \u03BB*s  \u2208 X,    \u2200 \u03BB \u2208 [ 0,\u03BB^{|} ]",210,280,new java.awt.Font("Dialog",1,14),new java.awt.Font("Dialog",1,9));
      }
     if(step>=5)
      {
       if(step==5)
        g1.setColor(new Color(0,0,160));
         else
          g1.setColor(new Color(0,0,80));
       g1.drawString("Выберем начальную точку",70,310);
       OptimizationBasic.drawFormula(g1,"x^{0}",268,310,new java.awt.Font("Dialog",1,14),new java.awt.Font("Dialog",1,11));
       g1.drawString("в области допустимых значений, т.е. в области,",288,310);
       g1.drawString("где выполняются все ограничения-неравенства:",50,330);
       OptimizationBasic.drawFormula(g1,"x^{0} \u2208 X.",410,330,new java.awt.Font("Dialog",1,14),new java.awt.Font("Dialog",1,11));
      }
     if(step>=6)
      {
       if(step==6)
        g1.setColor(new Color(0,0,160));
         else
          g1.setColor(new Color(0,0,80));
       g1.drawString("Каждая последующая точка ищется по формуле:",70,350);
       OptimizationBasic.drawFormula(g1,"где t_{k} - величина шага, s^{k} - направление движения.",50,410,new java.awt.Font("Dialog",1,14),new java.awt.Font("Dialog",1,11));
       g1.setColor(new Color(246,246,250));
       g1.fillRect(270,360,130,30);
       g1.setColor(new Color(250,0,0));
       g1.drawRect(270,360,130,30);
       OptimizationBasic.drawFormula(g1,"x^{k+1} = x^{k}+ t_{k}*s^{k}",280,380,new java.awt.Font("Dialog",1,14),new java.awt.Font("Dialog",1,11));
       g1.setFont(new Font("Dialog",1,14));
       g1.drawString("(2)",600,380);
      }
     if(step>=7)
      {
       if(step==7)
        g1.setColor(new Color(0,0,160));
         else
          g1.setColor(new Color(0,0,80));
       g1.drawString("Будем выбирать направления",70,430);
       OptimizationBasic.drawFormula(g1,"s^{k}",295,430,new java.awt.Font("Dialog",1,14),new java.awt.Font("Dialog",1,11));
       g1.drawString("так, чтобы все итерационные точки были в",315,430);
       g1.drawString("допустимой области. Кроме того, вдоль полученного направления значение",50,450);
       g1.drawString("функции должно убывать.",50,470);
      }
     }
    if(step>=8 && step<=15)
     {
      if(step>=8)
       {
        g1.setColor(Color.white);
        g1.fillRect(50,110,330,190);
        if(step==8)
         g1.setColor(new Color(0,0,160));
         else
          g1.setColor(new Color(0,0,80));
        OptimizationBasic.drawFormula(g1,"Для того, чтобы значение функции f(x) убывало в искомом направлении s^{0},",70,100,new java.awt.Font("Dialog",1,14),new java.awt.Font("Dialog",1,11));
        OptimizationBasic.drawFormula(g1,"построим её антиградиент в точ-",390,120,new java.awt.Font("Dialog",1,14),new java.awt.Font("Dialog",1,8));
        OptimizationBasic.drawFormula(g1,"ке x^{0}",390,140,new java.awt.Font("Dialog",1,14),new java.awt.Font("Dialog",1,11));
        g1.setColor(new Color(0,0,160));
        g1.drawRect(50,110,330,190);
        g1.setColor(new Color(0,0,60));
        g1.drawLine(213,208,213,212);
        g1.drawLine(214,208,214,212);

        g1.drawOval(80,120,100,160);
        g1.drawOval(100,140,60,120);
        g1.drawOval(115,160,30,80);
        g1.fillOval(129,198,4,4);
        g1.setColor(new Color(177,197,255));
        x[0]=305; x[1]=365; x[2]=217;
        y[0]=145; y[1]=205; y[2]=266;
        g1.fillPolygon(x,y,3);
        g1.setColor(Color.blue);
        OptimizationBasic.drawFormula(g1,"g_{1} \u2264 0",240,130,new java.awt.Font("Dialog",1,12),new java.awt.Font("Dialog",1,11));
        OptimizationBasic.drawFormula(g1,"g_{2} \u2264 0",330,130,new java.awt.Font("Dialog",1,12),new java.awt.Font("Dialog",1,11));
        OptimizationBasic.drawFormula(g1,"g_{3} \u2264 0",290,250,new java.awt.Font("Dialog",1,12),new java.awt.Font("Dialog",1,11));
        g1.fillOval(263,200,4,4);
        g1.drawLine(330,111,194,299);
        g1.drawLine(270,111,379,220);
        g1.drawLine(379,200,140,299);
        g1.setColor(new Color(0,0,60));
        OptimizationBasic.drawFormula(g1,"x^{0}",270,210,new java.awt.Font("Dialog",1,14),new java.awt.Font("Dialog",1,11));

        g1.setColor(new Color(180,0,60));
        g1.drawLine(265,201,210,201);
        g1.drawLine(210,201,215,198);
        g1.drawLine(210,201,215,204);
        OptimizationBasic.drawFormula(g1,"-f  (x^{0})",200,220,new java.awt.Font("Dialog",1,14),new java.awt.Font("Dialog",1,11));
        g1.drawLine(213,208,213,212);
        g1.drawLine(214,208,214,212);
       }
      if(step>=9)
        {
        if(step==9)
         g1.setColor(new Color(0,0,160));
         else
          g1.setColor(new Color(0,0,80));
         g1.drawString("и конус возможных направ-",425,140);
         g1.drawString("лений убывания.",390,160);
        if(step==9)
         g1.setColor(new Color(72,104,255));
         else
          g1.setColor(new Color(130,160,255));
         g1.drawLine(264,110,264,300);
         g1.fillArc(244,176,40,50,90,180);
         g1.setColor(new Color(180,0,60));
         g1.drawLine(265,201,210,201);
         g1.setColor(Color.blue);
         g1.fillOval(263,200,4,4);
         g1.drawLine(330,111,194,299);
       }
      if(step>=10)
        {
        if(step==10)
         g1.setColor(new Color(0,0,160));
         else
          g1.setColor(new Color(0,0,80));
        g1.drawString("Для того, чтобы",515,160);
        g1.drawString("обеспечить движение внутри об-",390,180);
        g1.drawString("ласти, построим перпендикуляр",390,200);
        OptimizationBasic.drawFormula(g1,"к активному ограничению из точ-",390,220,new java.awt.Font("Dialog",1,14),new java.awt.Font("Dialog",1,9));
        OptimizationBasic.drawFormula(g1,"ки x^{0} (ограничение g_{j}(x) называ-",390,240,new java.awt.Font("Dialog",1,14),new java.awt.Font("Dialog",1,11));
        g1.drawString("ется",390,260);
        OptimizationBasic.drawFormula(g1,"в точке x^{0}, если",516,260,new java.awt.Font("Dialog",1,14),new java.awt.Font("Dialog",1,11));
        OptimizationBasic.drawFormula(g1,"g_{j}(x^{0}) = 0)",390,280,new java.awt.Font("Dialog",1,14),new java.awt.Font("Dialog",1,11));

        g1.setColor(new Color(150,0,0));
        g1.setFont(new Font("Dialog",3,15));
        g1.drawString("активным",430,260);
        g1.setFont(new Font("Dialog",1,14));
        g1.setColor(new Color(151,39,217));
        g1.drawLine(264,200,210,165);
        g1.drawLine(210,165,213,172);
        g1.drawLine(210,165,217,165);
        OptimizationBasic.drawFormula(g1,"g_{2}(x^{0})",200,155,new java.awt.Font("Dialog",1,14),new java.awt.Font("Dialog",1,9));
        g1.drawLine(210,142,210,146);
        g1.drawLine(211,142,211,146);
      }
      if(step>=11)
        {
        if(step==11)
         g1.setColor(new Color(0,0,160));
         else
          g1.setColor(new Color(0,0,80));
        g1.drawString("и конус соответствую-",460,280);
        g1.drawString("щих направлений.",390,300);
        if(step==11)
         g1.setColor(new Color(0,0,255));
          else
          g1.setColor(new Color(112,144,255));
        g1.drawArc(240,175,50,50,53,-134-90+48);
        g1.drawLine(279,180,252,218);
       }
      if(step>=12)
       {
        if(step==12)
         g1.setColor(new Color(0,0,160));
         else
          g1.setColor(new Color(0,0,80));
        g1.drawString("Общая часть полученных конусов и даёт нам искомый конус возможных на-",70,320);
        g1.drawString("правлений движения.",50,340);
         g1.setColor(new Color(0,0,160));
        g1.fillArc(240,176,50,50,235,35);
       }
      if(step>=13)
       {
        if(step==13)
         g1.setColor(new Color(0,0,160));
         else
          g1.setColor(new Color(0,0,80));
        OptimizationBasic.drawFormula(g1,"Если такого направления s^{0} не существует, значит точка x^{0}",210,340,new java.awt.Font("Dialog",1,14),new java.awt.Font("Dialog",1,11));
        g1.drawString("является оптимальной.",50,360);
       }
     if(step>=14)
     {
      if(step==14)
        g1.setColor(new Color(0,0,160));
         else
          g1.setColor(new Color(0,0,80));
       g1.drawString("Аналитически условие убывания функции в данном направлении записыва-",70,380);
       g1.drawString("ется в виде:",50,400);
       g1.setColor(new Color(246,246,250));
       g1.fillRect(270,400,130,30);
       g1.setColor(new Color(250,0,0));
       g1.drawRect(270,400,130,30);
       OptimizationBasic.drawFormula(g1,"< f  ( x^{0}), s^{0} > < 0",280,420,new java.awt.Font("Dialog",1,14),new java.awt.Font("Dialog",1,11));
       g1.drawLine(302,409,302,413);
       g1.drawLine(303,409,303,413);
      }
      if(step>=15)
       {
       if(step==15)
        g1.setColor(new Color(0,0,160));
         else
          g1.setColor(new Color(0,0,80));
        g1.drawString("Теперь рассмотрим условия, которые нужно наложить, чтобы направление",70,450);
        g1.drawString("было возможным:",50,470);
       }
      }
     if(step>=16 && step<=21)
     {
      if(step>=16)
       {
       if(step==16)
        g1.setColor(new Color(0,0,160));
         else
          g1.setColor(new Color(0,0,80));
        OptimizationBasic.drawFormula(g1,"Здесь J_{a} - множество индексов j таких, что  -\u03B5_{0} < g_{j}(x^{0}) \u2264 0,  \u03B5_{0}- заранее задан-",70,140,new java.awt.Font("Dialog",1,14),new java.awt.Font("Dialog",1,11));
        OptimizationBasic.drawFormula(g1,"ная точность вычисления.",50,160,new java.awt.Font("Dialog",1,14),new java.awt.Font("Dialog",1,11));

        g1.setColor(new Color(246,246,250));
        g1.fillRect(240,90,185,30);
        g1.setColor(new Color(250,0,0));
        g1.drawRect(240,90,185,30);
        OptimizationBasic.drawFormula(g1,"< g _{j} (x^{0}), s^{0} > < 0;   j \u2208 J_{a}",250,110,new java.awt.Font("Dialog",1,14),new java.awt.Font("Dialog",1,11));
        g1.drawLine(272,98,272,102);
        g1.drawLine(273,98,273,102);
       }
      if(step>=17)
       {
       if(step==17)
        g1.setColor(new Color(0,0,160));
         else
          g1.setColor(new Color(0,0,80));
        g1.drawString("Возможное направление, удовлетворяющее условию максимального убыва-",70,180);
        g1.drawString("ния функции должно быть как можно ближе к антиградиенту, поэтому в общем",50,200);
        g1.drawString("виде будем искать:",50,220);
        g1.setColor(new Color(246,246,250));
        g1.fillRect(240,220,180,50);
        g1.setColor(new Color(250,0,0));
        g1.drawRect(240,220,180,50);
        OptimizationBasic.drawFormula(g1,"min < f (x^{k}), s^{k} >",275,240,new java.awt.Font("Dialog",1,14),new java.awt.Font("Dialog",1,11));
        g1.drawLine(323,228,323,231);
        g1.drawLine(324,228,324,231);
        OptimizationBasic.drawFormula(g1,"< g _{j} (x^{k}), s^{k} > < 0;  j \u2208 J_{a}",250,260,new java.awt.Font("Dialog",1,14),new java.awt.Font("Dialog",1,11));
        g1.drawLine(272,248,272,252);
        g1.drawLine(273,248,273,252);
        g1.setFont(new Font("Dialog",1,14));
        g1.drawString("(3)",600,250);
       }
      if(step>=18)
       {
       if(step==18)
        g1.setColor(new Color(0,0,160));
         else
          g1.setColor(new Color(0,0,80));
        g1.drawString("Построенная задача (3) - задача линейного программирования.",70,290);
       }
     if(step>=19)
       {
       if(step==19)
        g1.setColor(new Color(0,0,160));
         else
          g1.setColor(new Color(0,0,80));
        g1.drawString("Для того,",535,290);
        g1.drawString("чтобы её решить, добавим ограничения на направление:",50,310);
        g1.setColor(new Color(246,246,250));
        g1.fillRect(250,320,170,30);
        g1.setColor(new Color(250,0,0));
        g1.drawRect(250,320,170,30);
        OptimizationBasic.drawFormula(g1,"|| s || \u2264 1   s_{1}^{2}+ s_{2}^{2}= 1",260,340,new java.awt.Font("Dialog",1,14),new java.awt.Font("Dialog",1,11));
        g1.setFont(new Font("Dialog",1,14));
        g1.drawString("(3.1)",590,340);
      }
     if(step>=20)
      {
       if(step==20)
        g1.setColor(new Color(0,0,160));
         else
          g1.setColor(new Color(0,0,80));
        g1.drawString("или",320,370);
        g1.drawString("Условия (3.1) и (3.2) называются условиями",70,430);
        g1.drawString("вектора s и пред-",502,430);
        g1.drawString("назначены для того, чтобы решение было конечным.",50,450);
        g1.setColor(new Color(150,0,0));
        g1.setFont(new Font("Dialog",3,15));
        g1.drawString("нормализации",390,430);
        g1.setFont(new Font("Dialog",1,14));
        g1.setColor(new Color(246,246,250));
        g1.fillRect(220,380,230,30);
        g1.setColor(new Color(250,0,0));
        g1.drawRect(220,380,230,30);
        OptimizationBasic.drawFormula(g1,"| s_{j} | \u2264 1   -1 \u2264s_{1}\u2264 1;  -1 \u2264s_{2}\u2264 1",230,400,new java.awt.Font("Dialog",1,14),new java.awt.Font("Dialog",1,11));
        g1.setFont(new Font("Dialog",1,14));
        g1.drawString("(3.2)",590,400);
       }
     if(step>=21)
      {
       if(step==21)
        g1.setColor(new Color(0,0,160));
         else
          g1.setColor(new Color(0,0,80));
       OptimizationBasic.drawFormula(g1,"Объединяя задачу (3) и условия (3.2), мы можем вычислить направление s^{k}.",68,470,new java.awt.Font("Dialog",1,14),new java.awt.Font("Dialog",1,11));
      }
     }
    if(step>=22 && step<=29)
     {
      if(step>=22)
      {
       if(step==22)
        g1.setColor(new Color(0,0,160));
         else
          g1.setColor(new Color(0,0,80));
        OptimizationBasic.drawFormula(g1,"Определим величину шага t_{k}:",50,100,new java.awt.Font("Dialog",1,14),new java.awt.Font("Dialog",1,11));
        g1.drawString("1) Шаг выбирается так, чтобы функция убывала.",70,120);
      }
      if(step>=23)
       {
       if(step==23)
        g1.setColor(new Color(0,0,160));
         else
          g1.setColor(new Color(0,0,80));
        g1.setFont(new Font("Dialog",1,14));
        OptimizationBasic.drawFormula(g1,"Для этого нужно найти t^{*}_{k}:",70,140,new java.awt.Font("Dialog",1,14),new java.awt.Font("Dialog",1,11));
        g1.setColor(new Color(246,246,250));
        g1.fillRect(210,150,250,40);
        g1.setColor(new Color(250,0,0));
        g1.drawRect(210,150,250,40);
        OptimizationBasic.drawFormula(g1,"f ( x^{k}+ t^{*}_{k}s^{k} ) = min  { f ( x^{k}+ t_{k}s^{k}) }",220,170,new java.awt.Font("Dialog",1,14),new java.awt.Font("Dialog",1,11));
        OptimizationBasic.drawFormula(g1,"t_{k} \u2265 0",322,180,new java.awt.Font("Dialog",1,11),new java.awt.Font("Dialog",1,11));
        g1.setFont(new Font("Dialog",1,14));
        g1.drawString("(4)",600,170);
       }
      if(step>=24)
       {
       if(step==24)
        g1.setColor(new Color(0,0,160));
         else
          g1.setColor(new Color(0,0,80));
        g1.setFont(new Font("Dialog",1,14));
        g1.drawString("2) Шаг не должен выводить нас из дополнительной области.",70,210);
        }
     if(step>=25)
       {
       if(step==25)
        g1.setColor(new Color(0,0,160));
         else
          g1.setColor(new Color(0,0,80));
        g1.drawString("Для этого находим",70,230);
        g1.setColor(new Color(246,246,250));
        g1.fillRect(220,240,230,40);
        g1.setColor(new Color(250,0,0));
        g1.drawRect(220,240,230,40);
        OptimizationBasic.drawFormula(g1,"t^{j}_{k} = max { 0, g_{j} ( x^{k} + t_{k}s^{k}) = 0 }",230,260,new java.awt.Font("Dialog",1,14),new java.awt.Font("Dialog",1,11));
        OptimizationBasic.drawFormula(g1,"j = 1 .. m",257,270,new java.awt.Font("Dialog",1,11),new java.awt.Font("Dialog",1,11));
       }
     if(step>=26)
       {
       if(step==26)
        g1.setColor(new Color(0,0,160));
         else
          g1.setColor(new Color(0,0,80));
         OptimizationBasic.drawFormula(g1,"и",328,300,new java.awt.Font("Dialog",1,14),new java.awt.Font("Dialog",1,9));
         g1.setColor(new Color(246,246,250));
         g1.fillRect(260,310,150,40);
         g1.setColor(new Color(250,0,0));
         g1.drawRect(260,310,150,40);
         OptimizationBasic.drawFormula(g1,"t^{**}_{k} = min { t^{ j}_{k} > 0 }",270,330,new java.awt.Font("Dialog",1,14),new java.awt.Font("Dialog",1,11));

         g1.setFont(new Font("Dialog",1,11));
         g1.drawString("j = 1..m",303,340);
         g1.setFont(new Font("Dialog",1,14));
         g1.drawString("(5)",600,310);
         }
      if(step>=27)
       {
       if(step==27)
        g1.setColor(new Color(0,0,160));
         else
         g1.setColor(new Color(0,0,80));
         g1.drawString("Окончательно получаем величину шага:",70,370);
         g1.setColor(new Color(246,246,250));
         g1.fillRect(240,380,190,30);
         g1.setColor(new Color(250,0,0));
         g1.drawRect(240,380,190,30);
         OptimizationBasic.drawFormula(g1,"t_{k} = min { t^{*}_{k} > 0 , t^{**}_{k} > 0 }",250,400,new java.awt.Font("Dialog",1,14),new java.awt.Font("Dialog",1,11));
         g1.setFont(new Font("Dialog",1,14));
         g1.drawString("(6)",600,400);
       }
      if(step>=28)
       {
       if(step==28)
        g1.setColor(new Color(0,0,160));
         else
         g1.setColor(new Color(0,0,80));
       g1.drawString("Теперь у нас есть все параметры для нахождения следующей итерационной",70,430);
       g1.drawString("точки по формуле (2) (см. Формулы).",50,450);
       }
      if(step>=29)
       {
       if(step==29)
        g1.setColor(new Color(0,0,160));
         else
         g1.setColor(new Color(0,0,80));
         g1.drawString("Будем продолжать процесс поиска, пока не выполнится критерий остановки:",70,470);
        }
     }
     if(step>=30 && step<=39)
     {
      if(step>=30)
       {
       if(step==30)
        g1.setColor(new Color(0,0,160));
         else
          g1.setColor(new Color(0,0,80));
          g1.setColor(new Color(246,246,250));
          g1.fillRect(250,90,170,30);
          g1.setColor(new Color(250,0,0));
          g1.drawRect(250,90,170,30);
          OptimizationBasic.drawFormula(g1,"-\u03B5_{k} \u2264 < f  (x^{k}), s^{k} > < 0",260,110,new java.awt.Font("Dialog",1,14),new java.awt.Font("Dialog",1,11));
          g1.drawLine(319,103,319,100);
          g1.drawLine(320,103,320,100);
          g1.setFont(new Font("Dialog",1,14));
        //jbtnNext.setEnabled(false);
       }
      if(step>=31)
       {
       if(step==31)
        g1.setColor(new Color(0,0,160));
         else
          g1.setColor(new Color(0,0,80));
        OptimizationBasic.drawFormula(g1,"Рассмотрим пошаговую реализацию метода:",50,140,new java.awt.Font("Dialog",1,14),new java.awt.Font("Dialog",1,11));
       }
      if(step>=32)
       {
        if(step==32)
         g1.setColor(new Color(0,0,160));
          else
            g1.setColor(new Color(0,0,80));
       OptimizationBasic.drawFormula(g1,"построим линии уровня функции",380,140,new java.awt.Font("Dialog",1,14),new java.awt.Font("Dialog",1,11));
       OptimizationBasic.drawFormula(g1,"f(x)",360,160,new java.awt.Font("Dialog",1,14),new java.awt.Font("Dialog",1,11));
       g1.setColor(Color.white);
       g1.fillRect(51,151,299,239);
       g1.setColor(new Color(0,0,80));
       g1.drawLine(77, 151, 77, 389);
       g1.drawLine(51, 365, 349, 365);
       g1.drawLine(77, 151, 81, 161);
       g1.drawLine(77, 151, 73, 161);
       g1.drawLine(336, 369, 349, 365);
       g1.drawLine(336, 361, 349, 365);
       OptimizationBasic.drawFormula(g1,"x_{1}",327,380,new java.awt.Font("Dialog",1,14),new java.awt.Font("Dialog",1,11));
       OptimizationBasic.drawFormula(g1,"x_{2}",57,165,new java.awt.Font("Dialog",1,14),new java.awt.Font("Dialog",1,11));
       g1.setColor(new Color(0,0,160));
       g1.drawRect(50,150,300,240);
       for ( int i = 1; i <= 3; i++)
        g1.drawOval( 135+42 - i*40, 175+110 - i*20, i*80+5, i*40+5 );
       g1.fillOval( 136+42, 176+110, 4, 4 );
       OptimizationBasic.drawFormula(g1,"f ( x ) = f ( x_{ 1} , x_{ 2} )", 212, 218,new java.awt.Font("Dialog",3,12),new java.awt.Font("Dialog",3,11));
      }
      if(step>=33)
       {
        if(step==33)
         g1.setColor(new Color(0,0,160));
          else
            g1.setColor(new Color(0,0,80));
        OptimizationBasic.drawFormula(g1,"и множество допустимых значений", 390, 160,new java.awt.Font("Dialog",1,14),new java.awt.Font("Dialog",1,11));

        g1.setColor(Color.red);
        g1.drawLine(17-8+42, 189-4+110, 285+42, 279+110);
        g1.drawLine(17-8+42, 109+110, 180+42, 279+110);
        g1.drawLine(35+42, 41+110, 35+42, 279+110);
        g1.drawLine(9+42, 255+110, 305+42, 255+110);
        OptimizationBasic.drawFormula(g1,"g_{ 1}( x ) \u2264 0", 155+42, 225+110,new java.awt.Font("Dialog",1,12),new java.awt.Font("Dialog",1,11));
        OptimizationBasic.drawFormula(g1,"g_{ 2}( x ) \u2264 0", 65+42, 150+110,new java.awt.Font("Dialog",1,12),new java.awt.Font("Dialog",1,11));
        OptimizationBasic.drawFormula(g1,"g_{ 3}( x ) \u2264 0", 235+42, 235+110,new java.awt.Font("Dialog",1,12),new java.awt.Font("Dialog",1,11));
        OptimizationBasic.drawFormula(g1,"g_{ 4}( x ) \u2264 0", 50+42, 70+110,new java.awt.Font("Dialog",1,12),new java.awt.Font("Dialog",1,11));
      double i = -1.2;
      while (i <= 13.25) {
       if ( i <= 12.1 )
         g1.drawLine( (int) (35 +42+ i * 20), (int) (250+110 - (9 - i) * 20 / 3.0+5),
                     (int) (38 +42+ i * 20), (int) (255+110 - (9 - i) * 20 / 3.0+5));
       if ( i <= 6.9 )
         g1.drawLine( (int) (35 +42+ i * 20), (int) (255+110 - (6 - i) * 20 ),
                     (int) (35 +42+ i * 20), (int) (260+110 - (6 - i) * 20 ) );
       if ( i <= 10.5 )
         g1.drawLine( 35+42, (int) (255+110 -  i * 20 ), 39+42, (int) (250+110 -  i * 20 ) );
       g1.drawLine( (int)(35+42+i*20), 255+110 , (int)(39+42+i*20), 250+110  );
       i = i + 0.3;
       }
      }
     }
}}

 void jbtnNext_actionPerformed(ActionEvent e) {
  if(step<=38)
   step++;
  repaint();
  }

 void jbtnNew_actionPerformed(ActionEvent e) {
  step=0;
  ok=0;
  jbtnNext.setEnabled(true);
  jChkbFormula.setVisible(false);
  jChkbFormula.setSelected(false);
  repaint();
  }

 void jbtnBack_actionPerformed(ActionEvent e) {
  if(step!=0)
   step--;
  jbtnNext.setEnabled(true);
  repaint();
  }

 void jChkbFormula_mousePressed(MouseEvent e) {
   if(jChkbFormula.isSelected()==true)
    ok=0;
   else
    ok=1;
   repaint();
  }
}